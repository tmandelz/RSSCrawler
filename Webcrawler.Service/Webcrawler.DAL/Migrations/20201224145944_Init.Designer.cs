// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Webcrawler.DAL;

namespace Webcrawler.DAL.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20201224145944_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Webcrawler.DAL.Author", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EntryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("EntryId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Webcrawler.DAL.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EntryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("EntryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Webcrawler.DAL.Content", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EntryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HTMLContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SaveDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("EntryId");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("Webcrawler.DAL.Entry", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EntryId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("PublishDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("Entries");
                });

            modelBuilder.Entity("Webcrawler.DAL.Provider", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("EntryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("EntryId")
                        .IsUnique()
                        .HasFilter("[EntryId] IS NOT NULL");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("Webcrawler.DAL.Author", b =>
                {
                    b.HasOne("Webcrawler.DAL.Entry", "Entry")
                        .WithMany("Authors")
                        .HasForeignKey("EntryId");

                    b.Navigation("Entry");
                });

            modelBuilder.Entity("Webcrawler.DAL.Category", b =>
                {
                    b.HasOne("Webcrawler.DAL.Entry", "Entry")
                        .WithMany("Categories")
                        .HasForeignKey("EntryId");

                    b.Navigation("Entry");
                });

            modelBuilder.Entity("Webcrawler.DAL.Content", b =>
                {
                    b.HasOne("Webcrawler.DAL.Entry", "Entry")
                        .WithMany("Contents")
                        .HasForeignKey("EntryId");

                    b.Navigation("Entry");
                });

            modelBuilder.Entity("Webcrawler.DAL.Provider", b =>
                {
                    b.HasOne("Webcrawler.DAL.Entry", "Entry")
                        .WithOne("Provider")
                        .HasForeignKey("Webcrawler.DAL.Provider", "EntryId");

                    b.Navigation("Entry");
                });

            modelBuilder.Entity("Webcrawler.DAL.Entry", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Categories");

                    b.Navigation("Contents");

                    b.Navigation("Provider");
                });
#pragma warning restore 612, 618
        }
    }
}
